<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>my-blog-build-remark</title>
    <link href="/2024/11/04/my-blog-build-remark/"/>
    <url>/2024/11/04/my-blog-build-remark/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/04/hello-world/"/>
    <url>/2024/11/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>力扣刷题</title>
    <link href="/2024/11/04/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98/"/>
    <url>/2024/11/04/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。</p><p>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong>n &#x3D; 2<br><strong>输出：</strong>2<br><strong>解释：</strong>有两种方法可以爬到楼顶。</p><ol><li>1 阶 + 1 阶</li><li>2 阶</li></ol><p><strong>示例 2：</strong></p><p><strong>输入：</strong>n &#x3D; 3<br><strong>输出：</strong>3<br><strong>解释：</strong>有三种方法可以爬到楼顶。</p><ol><li>1 阶 + 1 阶 + 1 阶</li><li>1 阶 + 2 阶</li><li>2 阶 + 1 阶</li></ol><p><strong>常规方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-comment">// 初始判断</span><br>        <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    <span class="hljs-comment">//创建一个长度为`n+1`的数组`dp`来存储中间结果。</span><br>        <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>            dp[i] = dp[i - <span class="hljs-number">1</span>] + dp[i - <span class="hljs-number">2</span>];<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> dp[n];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Solution</span> <span class="hljs-variable">solution</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Solution</span>();<br>        System.out.println(solution.climbStairs(<span class="hljs-number">2</span>)); <span class="hljs-comment">// 输出: 2</span><br>        System.out.println(solution.climbStairs(<span class="hljs-number">3</span>)); <span class="hljs-comment">// 输出: 3</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>通用方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span>[] steps)</span> &#123;  <br>    <span class="hljs-type">int</span>[] steps = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;  <br>  <br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];  <br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;  <br>  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> step : steps) &#123;  <br>            <span class="hljs-keyword">if</span> (i &gt;= step) &#123;  <br>                dp[i] += dp[i - step];  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">return</span> dp[n];  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>通用方法，并且打印出来具体方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 方法：计算并打印出所有可能的爬楼梯方式  </span><br>   <span class="hljs-comment">// n 表示楼梯的总阶数，steps 是一个整数数组，表示每次可以爬的台阶数  </span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span>[] steps)</span> &#123;  <br>       List&lt;List&lt;Integer&gt;&gt; allWays = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <span class="hljs-comment">// 存储所有可能的爬楼梯方式的列表  </span><br>       backtrack(n, steps, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(), allWays); <span class="hljs-comment">// 调用回溯函数开始搜索  </span><br> <br>       <span class="hljs-comment">// 打印结果  </span><br>       System.out.println(<span class="hljs-string">&quot;总共有 &quot;</span> + allWays.size() + <span class="hljs-string">&quot; 种方法爬到楼顶。&quot;</span>);  <br>       System.out.println(<span class="hljs-string">&quot;具体方法如下：&quot;</span>);  <br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; allWays.size(); i++) &#123;  <br>           System.out.println((i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;. &quot;</span> + allWays.get(i)); <span class="hljs-comment">// 打印每种方式  </span><br>       &#125;  <br>   &#125;  <br> <br>   <span class="hljs-comment">// 回溯方法：递归地尝试所有可能的爬楼梯方式  </span><br>   <span class="hljs-comment">// remainingSteps 表示还需要爬的台阶数，steps 是可以爬的台阶数数组  </span><br>   <span class="hljs-comment">// currentWay 是当前尝试的路径（每一步的台阶数），allWays 存储所有可能的路径  </span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span> remainingSteps, <span class="hljs-type">int</span>[] steps, List&lt;Integer&gt; currentWay, List&lt;List&lt;Integer&gt;&gt; allWays)</span> &#123;  <br>       <span class="hljs-keyword">if</span> (remainingSteps == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 如果已经到达楼顶（没有台阶需要爬了）  </span><br>           allWays.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(currentWay)); <span class="hljs-comment">// 将当前路径添加到结果列表中  </span><br>           <span class="hljs-keyword">return</span>;  <br>       &#125;  <br> <br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> step : steps) &#123; <span class="hljs-comment">// 遍历所有可能的台阶数  </span><br>           <span class="hljs-keyword">if</span> (remainingSteps &gt;= step) &#123; <span class="hljs-comment">// 如果当前台阶数不超过剩余台阶数  </span><br>               currentWay.add(step); <span class="hljs-comment">// 选择这个台阶数，加入到当前路径  </span><br>               backtrack(remainingSteps - step, steps, currentWay, allWays); <span class="hljs-comment">// 递归地尝试剩余的台阶  </span><br>               currentWay.remove(currentWay.size() - <span class="hljs-number">1</span>); <span class="hljs-comment">// 回溯，撤销选择，尝试其他可能的台阶数  </span><br>           &#125;  <br>       &#125;  <br>   &#125;  <br> <br>   <span class="hljs-comment">// 主方法，用于测试climbStairs方法  </span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>       <span class="hljs-type">test</span> <span class="hljs-variable">solution</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">test</span>(); <span class="hljs-comment">// 创建test类的实例  </span><br>       <span class="hljs-type">int</span>[] steps1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;; <span class="hljs-comment">// 第一个测试用例，每次可以爬1或2阶台阶  </span><br>       <span class="hljs-type">int</span>[] steps2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;; <span class="hljs-comment">// 第二个测试用例，每次可以爬1、2或3阶台阶  </span><br> <br>       <span class="hljs-comment">// 测试不同情况  </span><br>       System.out.println(<span class="hljs-string">&quot;对于 2 阶楼梯，步数为 [1, 2]：&quot;</span>);  <br>       solution.climbStairs(<span class="hljs-number">2</span>, steps1);  <br> <br>       System.out.println(<span class="hljs-string">&quot;\n对于 3 阶楼梯，步数为 [1, 2]：&quot;</span>);  <br>       solution.climbStairs(<span class="hljs-number">3</span>, steps1);  <br> <br>       System.out.println(<span class="hljs-string">&quot;\n对于 4 阶楼梯，步数为 [1, 2, 3]：&quot;</span>);  <br>       solution.climbStairs(<span class="hljs-number">4</span>, steps2);  <br>   &#125;  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
